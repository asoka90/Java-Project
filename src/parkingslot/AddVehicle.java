/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package parkingslot;

import com.sun.glass.events.KeyEvent;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

/**
 *
 * @author Win10
 */
public class AddVehicle extends javax.swing.JFrame {

    /**
     * Creates new form AddVehicle
     */
    ParkingSlot parking = new ParkingSlot();
    public AddVehicle() {       
        //System.out.println(getName("STU0001"));
        initComponents();
        ImageIcon icon = new ImageIcon("src/parkingslot/misc/icon.png");
        this.setIconImage(icon.getImage());
    }
    
    public boolean checkID(String ID)
    {
        Statement st = parking.connectDB();
        String tableName[] = {"Student", "Faculty", "Guest"};
        int x = 0;
        while(x < tableName.length)
        {
            String query = "SELECT ID FROM "+tableName[x]+" WHERE ID = '"+ID+"'";
            try {
                ResultSet rs = st.executeQuery(query);
                while(rs.next())
                {
                    String idDB = rs.getString("ID");
                    if(idDB.equals(ID))
                    {
                        return true;
                    }
                }
            } catch (SQLException ex) {
                Logger.getLogger(AddVehicle.class.getName()).log(Level.SEVERE, null, ex);
            }
            finally{
                try {
                    st.close();
                } catch (SQLException ex) {
                    Logger.getLogger(AddVehicle.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            x++;
        }
        return false;
    }
    
    public String getCategory(String ID)
    {
        String category = "";
        Statement st = parking.connectDB();
        String tableName[] = {"Student", "Faculty", "Guest"};
        int x = 0;
        while(x < tableName.length)
        {
            String query = "SELECT Category FROM "+tableName[x]+" WHERE ID = '"+ID+"'";
            try {
                ResultSet rs = st.executeQuery(query);
                while(rs.next())
                {
                    category = rs.getString("Category");                    
                }
            } catch (SQLException ex) {
                Logger.getLogger(AddVehicle.class.getName()).log(Level.SEVERE, null, ex);
            }
            finally
            {
                try {
                    st.close();
                } catch (SQLException ex) {
                    Logger.getLogger(AddVehicle.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            x++;
        }
        return category;
    }
    
    public String getName(String ID)
    {
        String name = "";
        Statement st = parking.connectDB();
        String tableName[] = {"Student", "Faculty", "Guest"};
        int x = 0;
        while(x < tableName.length)
        {
            String query = "SELECT Name FROM "+tableName[x]+" WHERE ID = '"+ID+"'";
            try {
                ResultSet rs = st.executeQuery(query);
                while(rs.next())
                {
                    name = rs.getString("Name");                    
                }
            } catch (SQLException ex) {
                Logger.getLogger(AddVehicle.class.getName()).log(Level.SEVERE, null, ex);
            }
            finally
            {
                try {
                    st.close();
                } catch (SQLException ex) {
                    Logger.getLogger(AddVehicle.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            x++;
        }
        return name;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        idText = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        vehicleTypeBox = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        vehiclenumberText = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Parking Slot System");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(7, 30, 34));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(103, 146, 137));
        jLabel1.setText("ID:");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 30, 94, -1));

        idText.setBackground(new java.awt.Color(7, 30, 34));
        idText.setColumns(15);
        idText.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        idText.setBorder(null);
        idText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                idTextKeyPressed(evt);
            }
        });
        jPanel1.add(idText, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 60, 186, 20));

        jLabel2.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(103, 146, 137));
        jLabel2.setText("Vehicle Type:");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 100, 94, -1));

        vehicleTypeBox.setBackground(new java.awt.Color(244, 192, 149));
        vehicleTypeBox.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        vehicleTypeBox.setForeground(new java.awt.Color(51, 51, 51));
        vehicleTypeBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Cars", "Motorcycle", "Bus", "Truck" }));
        vehicleTypeBox.setBorder(null);
        jPanel1.add(vehicleTypeBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 130, 186, -1));

        jLabel6.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(103, 146, 137));
        jLabel6.setText("Vehicle Number:");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 170, -1, -1));

        vehiclenumberText.setBackground(new java.awt.Color(7, 30, 34));
        vehiclenumberText.setColumns(15);
        vehiclenumberText.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        vehiclenumberText.setBorder(null);
        vehiclenumberText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                vehiclenumberTextKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                vehiclenumberTextKeyReleased(evt);
            }
        });
        jPanel1.add(vehiclenumberText, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 200, 186, 20));

        jButton1.setBackground(new java.awt.Color(244, 192, 149));
        jButton1.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        jButton1.setForeground(new java.awt.Color(51, 51, 51));
        jButton1.setText("Add Vehicle");
        jButton1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204), 2));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 250, 110, 41));
        jPanel1.add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 220, 190, 10));
        jPanel1.add(jSeparator2, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 80, 190, 10));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 340, 310));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:
        new MenuFrame().setVisible(true);
    }//GEN-LAST:event_formWindowClosed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        String id = idText.getText();
        id = id.toUpperCase();
        String vehicleType = vehicleTypeBox.getSelectedItem().toString();
        String vehicleNumber = vehiclenumberText.getText();
        vehicleNumber = vehicleNumber.toUpperCase();
        
        Statement st = parking.connectDB();
        if(checkID(id))
        {
            if("Student".equals(getCategory(id)))
            {
                String query = "INSERT INTO Vehicle(StudentID, Name, Type, [Vehicle Number]) VALUES(?,?,?,?)";
                try {
                    PreparedStatement ps = parking.con.prepareStatement(query);
                    ps.setString(1, id);
                    ps.setString(2, getName(id));
                    ps.setString(3, vehicleType);
                    ps.setString(4, vehicleNumber);
                    ps.execute();
                    
                    //Insert Student Vehicle
                    query = "INSERT INTO [Student Vehicle](Name, Type, [Vehicle Number], ID) VALUES(?,?,?,?)"; 
                    ps = parking.con.prepareStatement(query);
                    ps.setString(1, getName(id));
                    ps.setString(2, vehicleType);
                    ps.setString(3, vehicleNumber);
                    ps.setString(4, id);
                    ps.execute();
                    JOptionPane.showMessageDialog(rootPane, "Registration of vehicle succesful");
                } catch (SQLException ex) {
                    Logger.getLogger(AddVehicle.class.getName()).log(Level.SEVERE, null, ex);
                }
                finally
                {
                    try {
                        st.close();
                    } catch (SQLException ex) {
                        Logger.getLogger(AddVehicle.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
            else if("Faculty".equals(getCategory(id)))
            {
                String query = "INSERT INTO Vehicle(FacultyID, Name, Type, [Vehicle Number]) VALUES(?,?,?,?)";
                try {
                    PreparedStatement ps = parking.con.prepareStatement(query);
                    ps.setString(1, id);
                    ps.setString(2, getName(id));
                    ps.setString(3, vehicleType);
                    ps.setString(4, vehicleNumber);
                    ps.execute();
                    
                    query = "INSERT INTO [Faculty Vehicle](Name, Type, [Vehicle Number], ID) VALUES(?,?,?,?)"; 
                    ps = parking.con.prepareStatement(query);
                    ps.setString(1, getName(id));
                    ps.setString(2, vehicleType);
                    ps.setString(3, vehicleNumber);
                    ps.setString(4, id);
                    ps.execute();
                    JOptionPane.showMessageDialog(rootPane, "Registration of vehicle succesful");
                } catch (SQLException ex) {
                    Logger.getLogger(AddVehicle.class.getName()).log(Level.SEVERE, null, ex);
                }
                finally
                {
                    try {
                        st.close();
                    } catch (SQLException ex) {
                        Logger.getLogger(AddVehicle.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
            else if("Guest".equals(getCategory(id)))
            {
                String query = "INSERT INTO Vehicle(GuestID, Name, Type, [Vehicle Number]) VALUES(?,?,?,?)";
                try {
                    PreparedStatement ps = parking.con.prepareStatement(query);
                    ps.setString(1, id);
                    ps.setString(2, getName(id));
                    ps.setString(3, vehicleType);
                    ps.setString(4, vehicleNumber);
                    ps.execute();
                    
                    query = "INSERT INTO [Guest Vehicle](Name, Type, [Vehicle Number], ID) VALUES(?,?,?,?)"; 
                    ps = parking.con.prepareStatement(query);
                    ps.setString(1, getName(id));
                    ps.setString(2, vehicleType);
                    ps.setString(3, vehicleNumber);
                    ps.setString(4, id);
                    ps.execute();
                    JOptionPane.showMessageDialog(rootPane, "Registration of vehicle succesful");
                } catch (SQLException ex) {
                    Logger.getLogger(AddVehicle.class.getName()).log(Level.SEVERE, null, ex);
                }
                finally
                {
                    try {
                        st.close();
                    } catch (SQLException ex) {
                        Logger.getLogger(AddVehicle.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }                
            }
        }
        else
        {
            JOptionPane.showMessageDialog(rootPane, "ID not found", "ID Error", JOptionPane.ERROR_MESSAGE);
        }
        idText.setText(null);
        vehiclenumberText.setText(null);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void idTextKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_idTextKeyPressed
        // TODO add your handling code here:
        String get = idText.getText();
        int length = get.length();
        if(length < 10)
        {
            idText.setEditable(true);
        }
        else
        {
            idText.setEditable(false);
        }
        if(evt.getExtendedKeyCode() == KeyEvent.VK_BACKSPACE || evt.getExtendedKeyCode() == KeyEvent.VK_DELETE)
        {
            idText.setEditable(true);
        }
    }//GEN-LAST:event_idTextKeyPressed

    private void vehiclenumberTextKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_vehiclenumberTextKeyPressed
        // TODO add your handling code here:
        String get = vehiclenumberText.getText();
        int length = get.length();
        if(length < 9)
        {
            vehiclenumberText.setEditable(true);
        }
        else
        {
            vehiclenumberText.setEditable(false);
        }
        if(evt.getExtendedKeyCode() == KeyEvent.VK_BACKSPACE || evt.getExtendedKeyCode() == KeyEvent.VK_DELETE)
        {
            vehiclenumberText.setEditable(true);
        }        
    }//GEN-LAST:event_vehiclenumberTextKeyPressed

    private void vehiclenumberTextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_vehiclenumberTextKeyReleased
        // TODO add your handling code here:
        String get = vehiclenumberText.getText();
        vehiclenumberText.setText(get.toUpperCase());
    }//GEN-LAST:event_vehiclenumberTextKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AddVehicle.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddVehicle.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddVehicle.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddVehicle.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AddVehicle().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField idText;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JComboBox vehicleTypeBox;
    private javax.swing.JTextField vehiclenumberText;
    // End of variables declaration//GEN-END:variables
}
