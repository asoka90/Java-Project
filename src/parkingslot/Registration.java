/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package parkingslot;

import com.sun.glass.events.KeyEvent;
import java.sql.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.xml.bind.DatatypeConverter;

/**
 *
 * @author Win10
 */
public class Registration extends javax.swing.JFrame {

    ParkingSlot parking = new ParkingSlot();
    public Registration() {       
        initComponents();
    }
    public int count(String tableName) throws SQLException
    {
        //Count
        Statement st = parking.connectDB();
        String query = "SELECT count(*) AS CountID FROM "+tableName+"";
        ResultSet rs = st.executeQuery(query);
        int id = 0;
        while(rs.next())
        {
            id = rs.getInt("CountID");
        }
        st.close();
        return id+1;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        name = new javax.swing.JTextField();
        course = new javax.swing.JTextField();
        address = new javax.swing.JTextField();
        contact = new javax.swing.JTextField();
        type = new javax.swing.JComboBox();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Parking Slot System");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Calibri", 0, 24)); // NOI18N
        jLabel1.setText("Registration");

        jLabel2.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        jLabel2.setText("Name");

        jLabel4.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        jLabel4.setText("Course");

        jLabel5.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        jLabel5.setText("Address");

        jLabel6.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        jLabel6.setText("Contact No.");

        name.setColumns(28);
        name.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                nameKeyPressed(evt);
            }
        });

        course.setColumns(28);
        course.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                courseKeyPressed(evt);
            }
        });

        address.setColumns(28);

        contact.setColumns(28);
        contact.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                contactKeyPressed(evt);
            }
        });

        type.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        type.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Student", "Faculty", "Guest" }));
        type.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                typeItemStateChanged(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        jButton1.setText("Submit");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                        .addComponent(jButton1)
                        .addComponent(contact, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel2)
                    .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(course, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(address, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addGap(4, 4, 4)
                .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(course, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(address, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(contact, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(28, 28, 28))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void typeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_typeItemStateChanged
        // TODO add your handling code here:
        String s = type.getSelectedItem().toString();
        System.out.println(s);
        if("Student".equals(s))
        {
            course.setEnabled(true);
        }
        else
        {
            course.setText(null);
            course.setEnabled(false);
        }
    }//GEN-LAST:event_typeItemStateChanged
    
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        Statement st = parking.connectDB();     
        String names = name.getText();
        try
        {
        names = names.substring(0, 1).toUpperCase() + names.substring(1);
        }
        catch(StringIndexOutOfBoundsException e)
        {}        
        String addr = address.getText();        
        String cont = contact.getText();
        String cour = course.getText();
        cour = cour.toUpperCase();
        String types = type.getSelectedItem().toString();
        String query;
        //
        if ("Student".equals(types))
        {
            if("".equals(names) || "".equals(addr) || "".equals(cont) || "".equals(cour))
            {
                JOptionPane.showMessageDialog(rootPane, "Fill up all the required fields!", "Registration Failed", JOptionPane.WARNING_MESSAGE);
            }
            else
            {                
                try {
                    query = "INSERT INTO Person (\n" +
                        "Name,\n" +
                        "Address,\n" +
                        "Contact,\n" +
                        "Course,\n" +
                        "Category\n" +
                        ") Values(?,?,?,?,?)";
                    PreparedStatement ps = parking.con.prepareStatement(query);
                    ps.setString(1, names);
                    ps.setString(2, addr);
                    ps.setString(3, cont);
                    ps.setString(4, cour);
                    ps.setString(5, types);
                    ps.executeUpdate();

                    String int_id = String.format("%04d",count("Student"));
                    //
                    String pquery = "SELECT PersonID FROM Person WHERE Name = '"+names+"'";
                    ResultSet rs = st.executeQuery(pquery);
                    int personid = 0;
                    while(rs.next())
                    {
                        personid = rs.getInt("PersonID");
                    }
                    System.out.println(personid);
                    query = "INSERT INTO Student (\n" +
                        "ID, \n"+
                        "Name,\n" +
                        "Address,\n" +
                        "Contact,\n" +
                        "Course,\n" +
                        "Category,\n" +
                        "PersonID\n"+
                        ") Values(?,?,?,?,?,?,?)";
                    ps = parking.con.prepareStatement(query);
                    ps.setString(1, "STU"+int_id);
                    ps.setString(2, names);
                    ps.setString(3, addr);
                    ps.setString(4, cont);
                    ps.setString(5, cour);
                    ps.setString(6, types);
                    ps.setInt(7, personid);
                    ps.executeUpdate();
                    JOptionPane.showMessageDialog(rootPane, "Registration Successful \nYour ID is "+ "STU"+int_id);
                } catch (SQLException ex) {
                    Logger.getLogger(Registration.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        else
        {
            if("Faculty".equals(types))
            {
                if("".equals(names) || "".equals(addr) || "".equals(cont))
                {
                    JOptionPane.showMessageDialog(rootPane, "Fill up all the required fields!", "Registration Failed", JOptionPane.WARNING_MESSAGE);
                }   
                else
                {                
                    try {
                        query = "INSERT INTO Person (\n" +
                            "Name,\n" +
                            "Address,\n" +
                            "Contact,\n" +
                            "Course,\n" +
                            "Category\n" +
                            ") Values(?,?,?,?,?)";
                        PreparedStatement ps = parking.con.prepareStatement(query);
                        ps.setString(1, names);
                        ps.setString(2, addr);
                        ps.setString(3, cont);
                        ps.setString(4, cour);
                        ps.setString(5, types);
                        ps.execute();

                        String int_id = String.format("%04d",count("Faculty"));
                        //
                        String pquery = "SELECT PersonID FROM Person WHERE Name = '"+names+"'";
                        ResultSet rs = st.executeQuery(pquery);
                        int personid = 0;
                        while(rs.next())
                        {
                            personid = rs.getInt("PersonID");
                        }
                        System.out.println(personid);
                        query = "INSERT INTO Faculty (\n" +
                            "ID, \n"+
                            "Name,\n" +
                            "Address,\n" +
                            "Contact,\n" +                                
                            "Category,\n" +
                            "PersonID\n"+
                            ") Values(?,?,?,?,?,?)";
                        ps = parking.con.prepareStatement(query);
                        ps.setString(1, "ER"+int_id);
                        ps.setString(2, names);
                        ps.setString(3, addr);
                        ps.setString(4, cont);                            
                        ps.setString(5, types);
                        ps.setInt(6, personid);
                        ps.executeUpdate();
                        JOptionPane.showMessageDialog(rootPane, "Registration Successful\nYour ID is "+ "ER"+int_id);
                    } catch (SQLException ex) {
                        Logger.getLogger(Registration.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }                
            }
            if("Guest".equals(types))
            {
                if("".equals(names) || "".equals(addr) || "".equals(cont))
                {
                    JOptionPane.showMessageDialog(rootPane, "Fill up all the required fields!", "Registration Failed", JOptionPane.WARNING_MESSAGE);
                }   
                else
                {                
                    try {
                        query = "INSERT INTO Person (\n" +
                            "Name,\n" +
                            "Address,\n" +
                            "Contact,\n" +
                            "Course,\n" +
                            "Category\n" +
                            ") Values(?,?,?,?,?)";
                        PreparedStatement ps = parking.con.prepareStatement(query);
                        ps.setString(1, names);
                        ps.setString(2, addr);
                        ps.setString(3, cont);
                        ps.setString(4, cour);
                        ps.setString(5, types);
                        ps.execute();

                        String int_id = String.format("%04d",count("Guest"));
                        //
                        String pquery = "SELECT PersonID FROM Person WHERE Name = '"+names+"'";
                        ResultSet rs = st.executeQuery(pquery);
                        int personid = 0;
                        while(rs.next())
                        {
                            personid = rs.getInt("PersonID");
                        }
                        System.out.println(personid);
                        query = "INSERT INTO Guest (\n" +
                            "ID, \n"+
                            "Name,\n" +
                            "Address,\n" +
                            "Contact,\n" +                                
                            "Category,\n" +
                            "PersonID\n"+
                            ") Values(?,?,?,?,?,?)";
                        ps = parking.con.prepareStatement(query);
                        ps.setString(1, "GUE"+int_id);
                        ps.setString(2, names);
                        ps.setString(3, addr);
                        ps.setString(4, cont);                            
                        ps.setString(5, types);
                        ps.setInt(6, personid);
                        ps.executeUpdate();
                        JOptionPane.showMessageDialog(rootPane, "Registration Successful\nYour ID is "+ "GUE"+int_id);
                    } catch (SQLException ex) {
                        Logger.getLogger(Registration.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    finally
                    {
                        try {
                            st.close();
                        } catch (SQLException ex) {
                            Logger.getLogger(Registration.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }                    
                }                
            }
        }
        //
        name.setText(null);
        address.setText(null);        
        contact.setText(null);
        course.setText(null);               
    }//GEN-LAST:event_jButton1ActionPerformed

    private void nameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nameKeyPressed
        // TODO add your handling code here:
        String names = name.getText();
        if(evt.getKeyChar() >= '0' && evt.getKeyChar() <= '9')
        {
            name.setEditable(false);
        }
        else
        {
            name.setEditable(true);
        }
    }//GEN-LAST:event_nameKeyPressed

    private void contactKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_contactKeyPressed
        // TODO add your handling code here:
        String cont = contact.getText();
        int length = cont.length();
        if(evt.getKeyChar() >= '0' && evt.getKeyChar() <= '9')
        {
            if(length < 11)
            {
                contact.setEditable(true);
            }
            else
            {
                contact.setEditable(false);
            }
        }
        else
        {
            if(evt.getExtendedKeyCode() == KeyEvent.VK_BACKSPACE || evt.getExtendedKeyCode() == KeyEvent.VK_DELETE)
            {
                contact.setEditable(true);
            }
            else
            {
                contact.setEditable(false);
            }
        }
    }//GEN-LAST:event_contactKeyPressed

    private void courseKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_courseKeyPressed
        // TODO add your handling code here:
//        String courses = course.getText();
        if(evt.getKeyChar() >= '0' && evt.getKeyChar() <= '9')
        {
            course.setEditable(false);
        }
        else
        {
            course.setEditable(true);
        }
    }//GEN-LAST:event_courseKeyPressed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:
        
        new MenuFrame().setVisible(true);

    }//GEN-LAST:event_formWindowClosed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Registration.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Registration.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Registration.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Registration.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Registration().setVisible(true);
            }
        });
        
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField address;
    private javax.swing.JTextField contact;
    private javax.swing.JTextField course;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JTextField name;
    private javax.swing.JComboBox type;
    // End of variables declaration//GEN-END:variables
}
